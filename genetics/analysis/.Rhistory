popLangs = read.csv("../data/gelato/samples.csv",stringsAsFactors = F)
popLangs[popLangs$populationName=="Quechua",]$glottocode = "ayac1239"
popDifferences = read.csv("../data/gelato/PopDistance.csv",stringsAsFactors = F,sep="\t")
popDifferences = as.dist(as.matrix(popDifferences))
genetics.tree = upgma(popDifferences)
genetics.tree$tip.label = popLangs[match(genetics.tree$tip.label,popLangs$populationName),]$glottocode
lang.tree = read.nexus("../../BEAST_analysis/models/2017/relaxedClock_excludeSmall/relaxedClock_Long_10k_MCCT.trees")
glmatch = data.frame(
lang=lang.tree$tip.label,
glotto=g[match(lang.tree$tip.label,g$id),]$name
)
commonLangs = intersect(lang.tree$tip.label, genetics.tree$tip.label)
lang.tree = drop.tip(lang.tree,lang.tree$tip.label[!lang.tree$tip.label %in% commonLangs])
genetics.tree = drop.tip(genetics.tree,genetics.tree$tip.label[!genetics.tree$tip.label %in% commonLangs])
lang.tree$tip.label = g[match(lang.tree$tip.label,g$id),]$name
genetics.tree$tip.label = g[match(genetics.tree$tip.label,g$id),]$name
lang.tree = compute.brlen(lang.tree)
genetics.tree = compute.brlen(genetics.tree)
plot(genetics.tree)
genetics.tree = nj(popDifferences)
genetics.tree$tip.label = popLangs[match(genetics.tree$tip.label,popLangs$populationName),]$glottocode
lang.tree = read.nexus("../../BEAST_analysis/models/2017/relaxedClock_excludeSmall/relaxedClock_Long_10k_MCCT.trees")
glmatch = data.frame(
lang=lang.tree$tip.label,
glotto=g[match(lang.tree$tip.label,g$id),]$name
)
commonLangs = intersect(lang.tree$tip.label, genetics.tree$tip.label)
lang.tree = drop.tip(lang.tree,lang.tree$tip.label[!lang.tree$tip.label %in% commonLangs])
genetics.tree = drop.tip(genetics.tree,genetics.tree$tip.label[!genetics.tree$tip.label %in% commonLangs])
lang.tree$tip.label = g[match(lang.tree$tip.label,g$id),]$name
genetics.tree$tip.label = g[match(genetics.tree$tip.label,g$id),]$name
lang.tree = compute.brlen(lang.tree)
genetics.tree = compute.brlen(genetics.tree)
plot(genetics.tree)
glmatch[order(glmatch$glotto),]
genetics.tree = read.newick(text="(((sout2996,wayu1243),((kari1311,kain1272),(arhu1242,east2555)));")
lang.tree = read.nexus("../../BEAST_analysis/models/2017/relaxedClock_excludeSmall/relaxedClock_Long_10k_MCCT.trees")
glmatch = data.frame(
lang=lang.tree$tip.label,
glotto=g[match(lang.tree$tip.label,g$id),]$name
)
commonLangs = intersect(lang.tree$tip.label, genetics.tree$tip.label)
lang.tree = drop.tip(lang.tree,lang.tree$tip.label[!lang.tree$tip.label %in% commonLangs])
genetics.tree = drop.tip(genetics.tree,genetics.tree$tip.label[!genetics.tree$tip.label %in% commonLangs])
lang.tree$tip.label = g[match(lang.tree$tip.label,g$id),]$name
genetics.tree$tip.label = g[match(genetics.tree$tip.label,g$id),]$name
lang.tree = compute.brlen(lang.tree)
genetics.tree = compute.brlen(genetics.tree)
lang.tree = as.dendrogram(lang.tree)
genetics.tree = read.newick(text="(((sout2996,wayu1243),((kari1311,kain1272),(arhu1242,east2555)));")
plot(genetics.tree)
genetics.tree = read.newick(text="((sout2996,wayu1243),((kari1311,kain1272),(arhu1242,east2555)));")
plot(genetics.tree)
lang.tree = read.nexus("../../BEAST_analysis/models/2017/relaxedClock_excludeSmall/relaxedClock_Long_10k_MCCT.trees")
glmatch = data.frame(
lang=lang.tree$tip.label,
glotto=g[match(lang.tree$tip.label,g$id),]$name
)
commonLangs = intersect(lang.tree$tip.label, genetics.tree$tip.label)
lang.tree = drop.tip(lang.tree,lang.tree$tip.label[!lang.tree$tip.label %in% commonLangs])
genetics.tree = drop.tip(genetics.tree,genetics.tree$tip.label[!genetics.tree$tip.label %in% commonLangs])
lang.tree$tip.label = g[match(lang.tree$tip.label,g$id),]$name
genetics.tree$tip.label = g[match(genetics.tree$tip.label,g$id),]$name
lang.tree = compute.brlen(lang.tree)
genetics.tree = compute.brlen(genetics.tree)
lang.tree = as.dendrogram(lang.tree)
genetics.tree = as.dendrogram(genetics.tree)
pdf("../results/Lang_Genetics_Tanglegram.pdf")
par(mar=c(0,1,3,1))
tanglegram(lang.tree,genetics.tree, margin_inner = 8, sort=T, edge.lwd = 2,axes=F)
text(0.11,0.15,"Pronouns",xpd=T,cex=2)
text(0.89,0.15,"Genetics",xpd=T,cex=2)
dev.off()
genetics.tree = read.newick(text="((sout2996,wayu1243),((kari1311,kain1272),(arhu1242,east2555)));")
lang.tree = read.nexus("../../BEAST_analysis/models/2017/relaxedClock_excludeSmall/relaxedClock_Long_10k_MCCT.trees")
glmatch = data.frame(
lang=lang.tree$tip.label,
glotto=g[match(lang.tree$tip.label,g$id),]$name
)
commonLangs = intersect(lang.tree$tip.label, genetics.tree$tip.label)
commonLangs
lang.tree = drop.tip(lang.tree,lang.tree$tip.label[!lang.tree$tip.label %in% commonLangs])
genetics.tree = drop.tip(genetics.tree,genetics.tree$tip.label[!genetics.tree$tip.label %in% commonLangs])
lang.tree$tip.label = g[match(lang.tree$tip.label,g$id),]$name
genetics.tree$tip.label = g[match(genetics.tree$tip.label,g$id),]$name
lang.tree = compute.brlen(lang.tree)
genetics.tree = compute.brlen(genetics.tree)
plot(lang.tree)
plot(genetics.tree)
lang.tree = as.dendrogram(lang.tree)
genetics.tree = as.dendrogram(genetics.tree)
tanglegram(lang.tree,genetics.tree, margin_inner = 8, sort=T, edge.lwd = 2,axes=F)
pdf("../results/Lang_Genetics_Tanglegram.pdf")
par(mar=c(0,1,3,1))
tanglegram(lang.tree,genetics.tree, margin_inner = 8, sort=T, edge.lwd = 2,axes=F)
text(0.11,0.15,"Pronouns",xpd=T,cex=2)
text(0.89,0.15,"Genetics",xpd=T,cex=2)
dev.off()
pdf("../results/Lang_Genetics_Tanglegram.pdf")
par(mar=c(0,1,3,1))
tanglegram(lang.tree,genetics.tree, margin_inner = 10, sort=T, edge.lwd = 2,axes=F)
text(0.11,0.15,"Pronouns",xpd=T,cex=2)
text(0.89,0.15,"Genetics",xpd=T,cex=2)
dev.off()
popDifferences = read.csv("../data/gelato/PopDistance.csv",stringsAsFactors = F,sep="\t")
popDifferences = as.dist(as.matrix(popDifferences))
genetics.tree = nj(popDifferences)
genetics.tree$tip.label = popLangs[match(genetics.tree$tip.label,popLangs$populationName),]$glottocode
lang.tree = read.nexus("../../BEAST_analysis/models/2017/relaxedClock_excludeSmall/relaxedClock_Long_10k_MCCT.trees")
glmatch = data.frame(
lang=lang.tree$tip.label,
glotto=g[match(lang.tree$tip.label,g$id),]$name
)
commonLangs = intersect(lang.tree$tip.label, genetics.tree$tip.label)
lang.tree = drop.tip(lang.tree,lang.tree$tip.label[!lang.tree$tip.label %in% commonLangs])
genetics.tree = drop.tip(genetics.tree,genetics.tree$tip.label[!genetics.tree$tip.label %in% commonLangs])
lang.tree$tip.label = g[match(lang.tree$tip.label,g$id),]$name
genetics.tree$tip.label = g[match(genetics.tree$tip.label,g$id),]$name
lang.tree = compute.brlen(lang.tree)
genetics.tree = compute.brlen(genetics.tree)
lang.tree = as.dendrogram(lang.tree)
genetics.tree = as.dendrogram(genetics.tree)
pdf("../results/Lang_Genetics_Tanglegram.pdf")
par(mar=c(0,1,3,1))
tanglegram(lang.tree,genetics.tree, margin_inner = 10, sort=T, edge.lwd = 2,axes=F)
text(0.11,0.15,"Pronouns",xpd=T,cex=2)
text(0.89,0.15,"Genetics",xpd=T,cex=2)
dev.off()
library(ape)
library(phytools)
library(dendextend)
library(phangorn)
try(setwd("~/Documents/MPI/LuisM_K_Pronoun/genetics/analysis"))
g = read.csv("../../../Glottolog/glottolog-languoid.csv/languoid.csv", stringsAsFactors = F)
popLangs = read.csv("../data/gelato/samples.csv",stringsAsFactors = F)
popLangs[popLangs$populationName=="Quechua",]$glottocode = "ayac1239"
# Calculate tree from Neighbour joining of pop distances.
#popDifferences = read.csv("../data/gelato/PopDistance.csv",stringsAsFactors = F,sep="\t")
#popDifferences = as.dist(as.matrix(popDifferences))
#genetics.tree = nj(popDifferences)
#genetics.tree$tip.label = popLangs[match(genetics.tree$tip.label,popLangs$populationName),]$glottocode
# (However, this has a different result from the paper)
# Directly from diagram in paper:
genetics.tree = read.newick(text="((sout2996,wayu1243),((kari1311,kain1272),(arhu1242,east2555)));")
lang.tree = read.nexus("../../BEAST_analysis/models/2017/relaxedClock_excludeSmall/relaxedClock_Long_10k_MCCT.trees")
glmatch = data.frame(
lang=lang.tree$tip.label,
glotto=g[match(lang.tree$tip.label,g$id),]$name
)
commonLangs = intersect(lang.tree$tip.label, genetics.tree$tip.label)
lang.tree = drop.tip(lang.tree,lang.tree$tip.label[!lang.tree$tip.label %in% commonLangs])
genetics.tree = drop.tip(genetics.tree,genetics.tree$tip.label[!genetics.tree$tip.label %in% commonLangs])
lang.tree$tip.label = g[match(lang.tree$tip.label,g$id),]$name
genetics.tree$tip.label = g[match(genetics.tree$tip.label,g$id),]$name
lang.tree = compute.brlen(lang.tree)
genetics.tree = compute.brlen(genetics.tree)
lang.tree = as.dendrogram(lang.tree)
genetics.tree = as.dendrogram(genetics.tree)
pdf("../results/Lang_Genetics_Tanglegram.pdf")
par(mar=c(0,1,3,1))
tanglegram(lang.tree,genetics.tree, margin_inner = 10, sort=T, edge.lwd = 2,axes=F)
text(0.11,0.15,"Pronouns",xpd=T,cex=2)
text(0.89,0.15,"Genetics",xpd=T,cex=2)
dev.off()
library(openxlsx)
setwd("~/Documents/Bristol/EXCD/KinCoding/UTO_docs/Stubbs/processing")
source("util.R")
kbsource = "UTO4"
coderID = "SR"
lsource = data.frame(
source_id= kbsource,
source_author= "Stubbs, Brian D.",
source_date="2011",
source_title="Uto-Aztecan: A comparative vocabulary",
source_quality="2"
)
l = read.delim("../data/langs.tab",sep="\t", stringsAsFactors = F)
r = read.xlsx("../data/KinBankTermCollectionMaster.xlsx")
r$description = gsub("â€˜","'",r$description)
hierarchicalRelations = getHierarchicalRelations(r)
r_order = r$parameter
pages = read.delim("../data/pages.tab",sep="\t", stringsAsFactors = F)
files = list.files("../data/longform/","*.xlsx")
files = files[!grepl("^~",files)]
fixes = list(c("Tsh","TSh"), c("Sp","SP"),c("Pyp",'PYp'),c("HP","Hp"))
# These are brances, rather than languages
langsToRemove = c(
# These are brances, rather than languages
"WM","CN",
# These are correctly transcribed, but don't appear in the list of languages
"Po","T","Z")
fixcodes = function(X){
for(fx in fixes){
X = gsub(fx[1],fx[2],X)
}
return(X)
}
d = data.frame()
for(f in files){
dx = read.xlsx(paste0("../data/longform/",f))
dx$file = f
dx$line = 2:(1+nrow(dx))
dx$Language = fixcodes(dx$Language)
d = rbind(d,dx)
}
d$source = paste0(kbsource,".",pages[match(d$file,pages$file),]$page)
# Check language sources
d$glotto = l[match(d$Language,l$code),]$glotto
d$Language.name = l[match(d$Language,l$code),]$lang
sort(table(d$Language.name))
sort(tapply(d$description,d$Language,function(X){length(unique(X))}))
# Check no typos in language code
d = d[!d$Language %in% langsToRemove,]
langs = unique(d$Language)
langs[!langs %in% l$code]
# Languages with no kin data
l$code[!l$code %in% d$Language]
d[d$Language %in% langs[!langs %in% l$code],c("Language","file","line")]
# Check no typos in descriptions
d[!d$description %in% r$description,c("description",'file','line')]
# Check wife has no 'woman speaking'
d[grepl("^wife",d$description) & !is.na(d$`term-ws`),c("description",'term-ws',"file","line")]
d[grepl("^husband",d$description) & !is.na(d$`term-ms`),c("description",'term-ws',"file","line")]
l[match()]
for(lang in langs){
dx = d[d$Language==lang,]
kinCategory = r[match(dx$description,r$description),]$`kin-category`
parameter = r[match(dx$description,r$description),]$parameter
dx$`alternative-address`[is.na(dx$`alternative-address`)] = ""
dx$comment[is.na(dx$comment)] = ""
cogComment = sapply(dx$cogid,function(X){
if(is.na(X)){
return("")
} else{
return(paste0("; cogid=",X))
}
})
dx$comment = paste0(dx$comment,cogComment)
langData= data.frame(
"kin-category"=kinCategory,
parameter = parameter,
description = dx$description,
"term-ms" = dx$`term-ms`,
"ipa-term-ms"= "",
"term-ws" = dx$`term-ws`,
"ipa-term-ws" = "",
"alternative-address" = dx$`alternative-address`,
comment = dx$comment,
sourceID= dx$source,
coder = coderID,
stringsAsFactors = F
)
# Fill in missing descriptions
missingPar = !r$parameter %in% langData$parameter
missingD = data.frame(
"kin-category" = r$`kin-category`[missingPar],
parameter = r$parameter[missingPar],
description = r$description[missingPar],
"term-ms" = "",
"ipa-term-ms"= "",
"term-ws" = "",
"ipa-term-ws" = "",
"alternative-address" = "",
comment = "",
sourceID= "",
coder = "",
stringsAsFactors = F
)
langData = rbind(langData,missingD)
# TODO: Make sure names are correct (not dots)
names(langData) = gsub("\\.",'-',names(langData))
if(sum(is.na(langData$`term-ms`))>0){
langData[is.na(langData$`term-ms`),]$`term-ms` = ""
}
if(sum(is.na(langData$`term-ws`))>0){
langData[is.na(langData$`term-ws`),]$`term-ws` = ""
}
# Extend superordinate terms to subordinate categories
langData = fillAllSubordinates(langData, hierarchicalRelations)
# Sort by Master sheet order
langDataOrder = factor(langData$parameter,levels=r_order)
langData = langData[order(langDataOrder),]
# Remove duplicates
langData= langData[!duplicated(langData[,c("description",'term-ws','term-ms')]),]
# Write to excel sheet
glotto = l[match(dx$Language,l$code),]$glotto[1]
if(is.na(glotto)){
print("----- No glotto code")
print(lang)
}
filename = paste0("../results/processedLanguages/kinterm_UTO_",glotto,"_",dx$Language[1],".xlsx")
writeDataFrameToKinbankExcelWorkbook(
langData,
filename,
logComment = paste0("Automatically generated from ",dx$file[1]),
lsource = lsource)
print(paste(lang,dx$Language.name[1],sum(langData$`term-ms`!=""),sum(langData$`term-ws`!="")))
}
g = read.csv("~/Documents/MPI/Glottolog/glottolog-languoid.csv/languoid.csv",stringsAsFactors = F)
dp = read.csv("../data/xd_id_to_language.csv",stringsAsFactors = F)
dpid = dp[match(l$glotto,dp$DialectLanguageGlottocode),]$xd_id
dpid[is.na(dpid)] = ""
meta = data.frame(
Varikin_id = paste0("kinterm-UT-",l$glotto),
Preferred_name = l$lang,
Language_Family = "Uto-Aztecan",
Latitude = g[match(l$glotto,g$id),c("latitude")],
Longitude = g[match(l$glotto,g$id),c("longitude")],
Glottolog_id = l$glotto,
DPLACE_id =  dpid,
ISO_code = g[match(l$glotto,g$id),c("hid")],
Status = "",
Notes = "",
url = ""
)
write.csv(meta,"../results/Meta.csv", fileEncoding = "UTF-8",row.names = F)
write.csv(meta[,c("Preferred_name")],"../results/Meta_Name.csv", fileEncoding = "UTF-8",row.names = F)
library(openxlsx)
setwd("~/Documents/Bristol/EXCD/KinCoding/UTO_docs/Stubbs/processing")
source("util.R")
library(openxlsx)
setwd("~/Documents/Bristol/EXCD/KinCoding/UTO_docs/Stubbs/processing")
source("util.R")
library(openxlsx)
setwd("~/Documents/Bristol/EXCD/KinCoding/UTO_docs/Stubbs/processing")
source("util.R")
kbsource = "UTO4"
coderID = "SR"
lsource = data.frame(
source_id= kbsource,
source_author= "Stubbs, Brian D.",
source_date="2011",
source_title="Uto-Aztecan: A comparative vocabulary",
source_quality="2"
)
l = read.delim("../data/langs.tab",sep="\t", stringsAsFactors = F)
r = read.xlsx("../data/KinBankTermCollectionMaster.xlsx")
r$description = gsub("â€˜","'",r$description)
hierarchicalRelations = getHierarchicalRelations(r)
r_order = r$parameter
pages = read.delim("../data/pages.tab",sep="\t", stringsAsFactors = F)
files = list.files("../data/longform/","*.xlsx")
files = files[!grepl("^~",files)]
fixes = list(c("Tsh","TSh"), c("Sp","SP"),c("Pyp",'PYp'),c("HP","Hp"))
# These are brances, rather than languages
langsToRemove = c(
# These are brances, rather than languages
"WM","CN",
# These are correctly transcribed, but don't appear in the list of languages
"Po","T","Z")
fixcodes = function(X){
for(fx in fixes){
X = gsub(fx[1],fx[2],X)
}
return(X)
}
d = data.frame()
for(f in files){
dx = read.xlsx(paste0("../data/longform/",f))
dx$file = f
dx$line = 2:(1+nrow(dx))
dx$Language = fixcodes(dx$Language)
d = rbind(d,dx)
}
d$source = paste0(kbsource,".",pages[match(d$file,pages$file),]$page)
# Check language sources
d$glotto = l[match(d$Language,l$code),]$glotto
d$Language.name = l[match(d$Language,l$code),]$lang
sort(table(d$Language.name))
sort(tapply(d$description,d$Language,function(X){length(unique(X))}))
# Check no typos in language code
d = d[!d$Language %in% langsToRemove,]
langs = unique(d$Language)
langs[!langs %in% l$code]
# Languages with no kin data
l$code[!l$code %in% d$Language]
d[d$Language %in% langs[!langs %in% l$code],c("Language","file","line")]
# Check no typos in descriptions
d[!d$description %in% r$description,c("description",'file','line')]
# Check wife has no 'woman speaking'
d[grepl("^wife",d$description) & !is.na(d$`term-ws`),c("description",'term-ws',"file","line")]
d[grepl("^husband",d$description) & !is.na(d$`term-ms`),c("description",'term-ws',"file","line")]
l[match()]
for(lang in langs){
dx = d[d$Language==lang,]
kinCategory = r[match(dx$description,r$description),]$`kin-category`
parameter = r[match(dx$description,r$description),]$parameter
dx$`alternative-address`[is.na(dx$`alternative-address`)] = ""
dx$comment[is.na(dx$comment)] = ""
cogComment = sapply(dx$cogid,function(X){
if(is.na(X)){
return("")
} else{
return(paste0("; cogid=",X))
}
})
dx$comment = paste0(dx$comment,cogComment)
langData= data.frame(
"kin-category"=kinCategory,
parameter = parameter,
description = dx$description,
"term-ms" = dx$`term-ms`,
"ipa-term-ms"= "",
"term-ws" = dx$`term-ws`,
"ipa-term-ws" = "",
"alternative-address" = dx$`alternative-address`,
comment = dx$comment,
sourceID= dx$source,
coder = coderID,
stringsAsFactors = F
)
# Fill in missing descriptions
missingPar = !r$parameter %in% langData$parameter
missingD = data.frame(
"kin-category" = r$`kin-category`[missingPar],
parameter = r$parameter[missingPar],
description = r$description[missingPar],
"term-ms" = "",
"ipa-term-ms"= "",
"term-ws" = "",
"ipa-term-ws" = "",
"alternative-address" = "",
comment = "",
sourceID= "",
coder = "",
stringsAsFactors = F
)
langData = rbind(langData,missingD)
# TODO: Make sure names are correct (not dots)
names(langData) = gsub("\\.",'-',names(langData))
if(sum(is.na(langData$`term-ms`))>0){
langData[is.na(langData$`term-ms`),]$`term-ms` = ""
}
if(sum(is.na(langData$`term-ws`))>0){
langData[is.na(langData$`term-ws`),]$`term-ws` = ""
}
# Extend superordinate terms to subordinate categories
langData = fillAllSubordinates(langData, hierarchicalRelations)
# Sort by Master sheet order
langDataOrder = factor(langData$parameter,levels=r_order)
langData = langData[order(langDataOrder),]
# Remove duplicates
langData= langData[!duplicated(langData[,c("description",'term-ws','term-ms')]),]
# Write to excel sheet
glotto = l[match(dx$Language,l$code),]$glotto[1]
if(is.na(glotto)){
print("----- No glotto code")
print(lang)
}
filename = paste0("../results/processedLanguages/kinterm_UTO_",glotto,"_",dx$Language[1],".xlsx")
writeDataFrameToKinbankExcelWorkbook(
langData,
filename,
logComment = paste0("Automatically generated from ",dx$file[1]),
lsource = lsource)
print(paste(lang,dx$Language.name[1],sum(langData$`term-ms`!=""),sum(langData$`term-ws`!="")))
}
g = read.csv("~/Documents/MPI/Glottolog/glottolog-languoid.csv/languoid.csv",stringsAsFactors = F)
dp = read.csv("../data/xd_id_to_language.csv",stringsAsFactors = F)
dpid = dp[match(l$glotto,dp$DialectLanguageGlottocode),]$xd_id
dpid[is.na(dpid)] = ""
meta = data.frame(
Varikin_id = paste0("kinterm-UT-",l$glotto),
Preferred_name = l$lang,
Language_Family = "Uto-Aztecan",
Latitude = g[match(l$glotto,g$id),c("latitude")],
Longitude = g[match(l$glotto,g$id),c("longitude")],
Glottolog_id = l$glotto,
DPLACE_id =  dpid,
ISO_code = g[match(l$glotto,g$id),c("hid")],
Status = "",
Notes = "",
url = ""
)
write.csv(meta,"../results/Meta.csv", fileEncoding = "UTF-8",row.names = F)
write.csv(meta[,c("Preferred_name")],"../results/Meta_Name.csv", fileEncoding = "UTF-8",row.names = F)
library(ape)
library(phytools)
library(dendextend)
library(phangorn)
try(setwd("~/Documents/MPI/LuisM_K_Pronoun/genetics/analysis"))
g = read.csv("../../../Glottolog/glottolog-languoid.csv/languoid.csv", stringsAsFactors = F)
popLangs = read.csv("../data/gelato/samples.csv",stringsAsFactors = F)
popLangs[popLangs$populationName=="Quechua",]$glottocode = "ayac1239"
# Calculate tree from Neighbour joining of pop distances.
#popDifferences = read.csv("../data/gelato/PopDistance.csv",stringsAsFactors = F,sep="\t")
#popDifferences = as.dist(as.matrix(popDifferences))
#genetics.tree = nj(popDifferences)
#genetics.tree$tip.label = popLangs[match(genetics.tree$tip.label,popLangs$populationName),]$glottocode
# (However, this has a different result from the paper)
# Directly from diagram in paper:
genetics.tree = read.newick(text="((sout2996,wayu1243),((kari1311,kain1272),(arhu1242,east2555)));")
lang.tree = read.nexus("../../BEAST_analysis/models/2017/relaxedClock_excludeSmall/relaxedClock_Long_10k_MCCT.trees")
glmatch = data.frame(
lang=lang.tree$tip.label,
glotto=g[match(lang.tree$tip.label,g$id),]$name
)
commonLangs = intersect(lang.tree$tip.label, genetics.tree$tip.label)
lang.tree = drop.tip(lang.tree,lang.tree$tip.label[!lang.tree$tip.label %in% commonLangs])
genetics.tree = drop.tip(genetics.tree,genetics.tree$tip.label[!genetics.tree$tip.label %in% commonLangs])
lang.tree$tip.label = g[match(lang.tree$tip.label,g$id),]$name
genetics.tree$tip.label = g[match(genetics.tree$tip.label,g$id),]$name
lang.tree = compute.brlen(lang.tree)
genetics.tree = compute.brlen(genetics.tree)
lang.tree = as.dendrogram(lang.tree)
genetics.tree = as.dendrogram(genetics.tree)
pdf("../results/Lang_Genetics_Tanglegram.pdf")
par(mar=c(0,1,3,1))
tanglegram(lang.tree,genetics.tree, margin_inner = 10, sort=T, edge.lwd = 2,axes=F)
text(0.11,0.15,"Pronouns",xpd=T,cex=2)
text(0.89,0.15,"Genetics",xpd=T,cex=2)
dev.off()
